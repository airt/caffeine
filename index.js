// Generated by CoffeeScript 1.10.0
(function() {
  var args, containsArgs, crtcounter, crtlogger, http, https, log, port, sendOnce, sendtoUrls, setto, urls;

  http = require('http');

  https = require('https');

  urls = require('./urls');

  containsArgs = function(c) {
    return process.argv.some(function(ea) {
      return c.some(function(ec) {
        return ec === ea;
      });
    });
  };

  args = {
    view: containsArgs(['-v', '--view']),
    test: containsArgs(['-t', '--test'])
  };

  crtcounter = function() {
    var n;
    n = 0;
    return function() {
      return n += 1;
    };
  };

  crtlogger = function(url) {
    var count, log;
    log = "0 - " + url;
    count = crtcounter();
    return function(status, error) {
      var c, i, ref, results, s;
      if ((status == null) && (error == null)) {
        return log;
      }
      c = count();
      s = (function() {
        results = [];
        for (var i = -2, ref = c.toString().length; -2 <= ref ? i <= ref : i >= ref; -2 <= ref ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this).map(function() {
        return ' ';
      }).join('');
      log = c + " - " + url;
      if (status != null) {
        log += "\n" + s + "status: " + status;
      }
      if (error != null) {
        log += "\n" + s + "error: " + error;
      }
      if (args.view) {
        return console.log(log);
      }
    };
  };

  log = {};

  urls.forEach(function(url) {
    return log[url] = crtlogger(url);
  });

  log.logs = function() {
    return urls.map(function(url) {
      return log[url]();
    }).join('\n');
  };

  sendOnce = function(url) {
    return (-1 === url.indexOf('https') ? http : https).get(url, function(res) {
      return log[url](res.statusCode);
    }).on('error', function(e) {
      return log[url](null, e.message);
    });
  };

  sendtoUrls = function(urls) {
    return urls.forEach(function(url) {
      var c, results;
      c = Math.round(Math.random() + 1);
      results = [];
      while ((c -= 1) > 0) {
        results.push(sendOnce(url));
      }
      return results;
    });
  };

  setto = function(d) {
    return setTimeout(function() {
      var timeout;
      sendtoUrls(urls);
      timeout = args.test ? 500 : Math.round(1000 * 600 * (Math.random() + 1));
      return setto(timeout);
    }, d);
  };

  setto(1);

  sendtoUrls(urls);

  if (containsArgs(['-b'])) {
    port = process.env.PORT || 3000;
    http.createServer(function(req, res) {
      res.writeHeader(200, {
        'Content-Type': 'text/plain'
      });
      return res.end(log.logs());
    }).listen(port, function() {
      console.log("started");
      console.log("urls:");
      console.log(urls);
      console.log("listen on http://localhost:" + port);
      return console.log("");
    });
  }

}).call(this);
